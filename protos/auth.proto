/**
 * ListenField authentication and authorization, token management, identity
 * management, and related functionality
 */
syntax = "proto3";

option csharp_namespace = "ListenField.Client.Auth";
package listenfield.auth;

import "google/protobuf/timestamp.proto";
import "api.proto";

message SessionTypeRequest {
  bool refresh = 1;
  bool username = 2;
  bool idToken = 3;
}

message LoginWithPasswordRequest {
  string username = 1;
  string password = 2;
  string mfaCode = 3;
  SessionTypeRequest sessionTypeRequest = 4;
}

message ContinueLoginRequest {
  string username = 1;
  string continuationToken = 2;
  string mfaCode = 3;
  map<string, string> challengeData = 4;
}

message LoginChallenge {
  message ChallengeTypeEnum {
    enum Value {
      MFA = 0;
      PASSWORD_VERIFIER = 1;
      NEW_PASSWORD = 2;
    }
  }

  ChallengeTypeEnum.Value type = 1;
  map<string, string> data = 2;
  string continuationToken = 5;
}

message SessionInfo {
  string accessToken = 1;
  string tokenType = 2;
  google.protobuf.Timestamp expiresAt = 3;
  string username = 4;
  string refreshToken = 5;
  string idToken = 6;
}

message LoginResult {
  oneof login_res_oneof {
    SessionInfo session = 1;
    LoginChallenge challenge = 2;
  }
}

message RefreshRequest {
  string refreshToken = 1;
  // the refresh field on the type request is ignored (assumed true)
  SessionTypeRequest sessionTypeRequest = 2;
}

service Test {
  rpc Echo (listenfield.EchoMessage) returns (listenfield.EchoMessage);
}

service Authentication {
  rpc LoginWithPassword (LoginWithPasswordRequest) returns (LoginResult);
  rpc ContinueLogin (ContinueLoginRequest) returns (LoginResult);
  rpc Refresh (RefreshRequest) returns (SessionInfo);
}
