syntax = "proto3";

// Later we might want to split this into separate files, but I think even so
// there's value in simplifying things by having a simple catalog-types file;
// we can maintain compatibility using `import public ...`

package listenfield.repo.catalog;
option csharp_namespace = "ListenField.Client.Repo";

import "repo/common-types.proto";

message ContactInfo {
  message ContactLineTypeEnum {
    enum Value {
      FixedPhone = 0;
      MobilePhone = 1;
      Fax = 2;
      Email = 3;
      InstantMessaging = 100;
      URL = 101;
      SocialProfile = 102; // use annotation field for the service name e.g. Twitter, LinkedIn
    }
  }
  message ContactLine {
    string identifier = 1;
    ContactLineTypeEnum.Value type = 2;
    string annotation = 3; // e.g. home, office
  }
  message Data {
    string addressLine1 = 1;
    string addressLine2 = 2;
    string poBoxNumber = 3;
    string postalCode = 4;
    string city = 5;
    string stateOrProvince = 6;
    string country = 7;
    string countryCode = 8;
    repeated ContactLine contactLines = 9;
    listenfield.repo.common.Location location = 10;
  }

  listenfield.repo.common.CompoundIdentifier ids = 1;
  Data data = 2;
  string owner = 3;
  repeated listenfield.repo.common.ContextItem contextItems = 300;
}

message Grower {
  message Data {
    string name = 1;
    string contactInfoId = 2;
  }

  listenfield.repo.common.CompoundIdentifier ids = 1;
  Data data = 2;
  string owner = 3;
  repeated listenfield.repo.common.ContextItem contextItems = 300;
}

message Farm {
  message Data {
    string description = 1;
    string growerId = 2;
    string contactInfoId = 3;
  }

  listenfield.repo.common.CompoundIdentifier ids = 1;
  Data data = 2;
  string owner = 3;
  repeated listenfield.repo.common.ContextItem contextItems = 300;
}


message FieldBoundary {
  message InteriorBoundaryAttribute {
    uint32 shapeIdRef = 1;
    bool isPassable = 2;
    string description = 3;
  }

  message DrivenHeadland {
    string description = 1;
    listenfield.repo.common.MultiPolygon spatialData = 2;
  }

  message ConstantOffsetHeadland {
    string description = 1;
    listenfield.repo.common.NumericRepresentationValue value = 2;
  }

  message Data {
    string description = 1;
    string fieldId = 2;
    listenfield.repo.common.MultiPolygon spatialData = 3;
    repeated string timeScopeIds = 4;
    oneof Headland {
      DrivenHeadland drivenHeadland = 101;
      ConstantOffsetHeadland constantOffsetHeadland = 102;
    }
    listenfield.repo.common.GpsSource boundarySource = 6;
    string originalEpsgCode = 7;
    repeated InteriorBoundaryAttribute interiorBoundaryAttributes = 8;
  }

  listenfield.repo.common.CompoundIdentifier ids = 1;
  Data data = 2;
  string owner = 3;
  repeated listenfield.repo.common.ContextItem contextItems = 300;
}


message Field {
  message Data {
    string description = 1;
    string farmId = 2;
    listenfield.repo.common.NumericRepresentationValue area = 3;
    repeated string timeScopeIds = 4;
    string activeBoundaryId = 5;
    listenfield.repo.common.NumericRepresentationValue slope = 6;
    listenfield.repo.common.NumericRepresentationValue aspect = 7;
    listenfield.repo.common.NumericRepresentationValue slopeLength = 8;
    repeated string guidanceGroupIds = 9;
  }

  listenfield.repo.common.CompoundIdentifier ids = 1;
  Data data = 2;
  string owner = 3;
  repeated listenfield.repo.common.ContextItem contextItems = 300;
}


message Crop {
  message Data {
    string name = 1;
    // leaving this as it's in the docs, but what does it link to?
    string parentId = 2;
    listenfield.repo.common.NumericRepresentationValue referenceWeight = 3;
    listenfield.repo.common.NumericRepresentationValue standardPayableMoisture = 4;
  }

  listenfield.repo.common.CompoundIdentifier ids = 1;
  Data data = 2;
  string owner = 3;
  repeated listenfield.repo.common.ContextItem contextItems = 300;
}


message CropZone {
  message Data {
    repeated string timeScopeIds = 1;
    string description = 2;
    string fieldId = 3;
    string cropId = 4;
    listenfield.repo.common.NumericRepresentationValue area = 5;
    listenfield.repo.common.MultiPolygon boundingRegion = 6;
    listenfield.repo.common.GpsSource boundarySource = 7;
    repeated string noteIds = 8;
    repeated string guidanceGroupIds = 9;
  }

  listenfield.repo.common.CompoundIdentifier ids = 1;
  Data data = 2;
  string owner = 3;
  repeated listenfield.repo.common.ContextItem contextItems = 300;
}


message Person {
  message Data {
    string firstName = 1;
    string middleName = 2;
    string lastName = 3;
    string combinedName = 4;
    string contactInfoId = 5;
  }

  listenfield.repo.common.CompoundIdentifier ids = 1;
  Data data = 2;
  string owner = 3;
  repeated listenfield.repo.common.ContextItem contextItems = 300;
}


message PersonRole {
  message PersonRolesEnum {
    enum Value {
      Unspecified = 0;
      Grower = 1;
      MarketProvider = 2;
      Customer = 3;
      Operator = 4;
      Owner = 5;
      FarmManager = 6;
      MarketAdvisor = 7;
      EndUser = 8;
      Financier = 9;
      InsuranceAgent = 10;
      GovernmentAgency = 11;
      FixedAssetSupplier = 12;
      MobileAssetSupplier = 13;
      InputSupplier = 14;
      IrrigationManager = 15;
      CropAdvisor = 16;
      CustomServiceProvider = 17;
      Laborer = 18;
      Transporter = 19;
      DataServicesProvider = 20;
      Authorizer = 21;
    }
  }
  message Data {
    string personId = 1;
    string growerId = 2;
    repeated string activeScopeIds = 3;
    PersonRolesEnum.Value role = 4;
    string companyId = 5;
  }

  listenfield.repo.common.CompoundIdentifier ids = 1;
  Data data = 2;
  string owner = 3;
  repeated listenfield.repo.common.ContextItem contextItems = 300;
}


message Company {
  message Data {
    string name = 1;
    string contactInfoId = 2;
  }

  listenfield.repo.common.CompoundIdentifier ids = 1;
  Data data = 2;
  string owner = 3;
  repeated listenfield.repo.common.ContextItem contextItems = 300;
}
