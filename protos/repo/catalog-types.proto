syntax = "proto3";

// Later we might want to split this into separate files, but I think even so
// there's value in simplifying things by having a simple catalog-types file;
// we can maintain compatibility using `import public ...`

package listenfield.repo.catalog;
option csharp_namespace = "ListenField.Client.Repo";

import "repo/common-types.proto";

message ContactInfo {
  message ContactTypeEnum {
    enum Value {
      FixedPhone = 0;
      MobilePhone = 1;
      Fax = 2;
      Email = 3;
    }
  }
  message Contact {
    string Number = 1;
    ContactTypeEnum.Value Type = 2;
  }

  string AddressLine1 = 1;
  string AddressLine2 = 2;
  string PoBoxNumber = 3;
  string PostalCode = 4;
  string City = 5;
  string StateOrProvince = 6;
  string Country = 7;
  string CountryCode = 8;
  repeated Contact Contacts = 9;
  listenfield.repo.common.Location Location = 10;
}

message Grower {
  message Data {
    string Name = 1;
  }

  string UUID = 1;
  repeated listenfield.repo.common.CompoundIdentifier.UniqueId Ids = 2;
  Data data = 3;
  string Owner = 4;
  repeated listenfield.repo.common.ContextItem ContextItems = 300;
}

message Farm {
  message Data {
    string Description = 1;
    string GrowerId = 2;
    ContactInfo ContactInfo = 3;
  }

  string UUID = 1;
  repeated listenfield.repo.common.CompoundIdentifier.UniqueId Ids = 2;
  Data data = 3;
  string Owner = 4;
  repeated listenfield.repo.common.ContextItem ContextItems = 300;
}


message FieldBoundary {
  message InteriorBoundaryAttribute {
    uint32 ShapeIdRef = 1;
    bool IsPassable = 2;
    string Description = 3;
  }

  message DrivenHeadland {
    string Description = 1;
    listenfield.repo.common.MultiPolygon SpatialData = 2;
  }

  message ConstantOffsetHeadland {
    string Description = 1;
    listenfield.repo.common.NumericRepresentationValue Value = 2;
  }

  message Data {
    string Description = 1;
    string FieldId = 2;
    listenfield.repo.common.MultiPolygon SpatialData = 3;
    repeated string TimeScopeIds = 4;
    oneof Headland {
      DrivenHeadland DrivenHeadland = 101;
      ConstantOffsetHeadland ConstantOffsetHeadland = 102;
    }
    listenfield.repo.common.GpsSource BoundarySource = 6;
    string OriginalEpsgCode = 7;
    repeated InteriorBoundaryAttribute InteriorBoundaryAttributes = 8;
  }

  string UUID = 1;
  repeated listenfield.repo.common.CompoundIdentifier.UniqueId Ids = 2;
  Data data = 3;
  string Owner = 4;
  repeated listenfield.repo.common.ContextItem ContextItems = 300;
}


message Field {
  message Data {
    string Description = 1;
    string FarmId = 2;
    listenfield.repo.common.NumericRepresentationValue Area = 3;
    repeated string TimeScopeIds = 4;
    string ActiveBoundaryId = 5;
    listenfield.repo.common.NumericRepresentationValue Slope = 6;
    listenfield.repo.common.NumericRepresentationValue Aspect = 7;
    listenfield.repo.common.NumericRepresentationValue SlopeLength = 8;
    repeated string GuidanceGroupIds = 9;
  }

  string UUID = 1;
  repeated listenfield.repo.common.CompoundIdentifier.UniqueId Ids = 2;
  Data data = 3;
  string Owner = 4;
  repeated listenfield.repo.common.ContextItem ContextItems = 300;
}


message Crop {
  message Data {
    string Name = 1;
    // leaving this as it's in the docs, but what does it link to?
    string ParentId = 2;
    listenfield.repo.common.NumericRepresentationValue ReferenceWeight = 3;
    listenfield.repo.common.NumericRepresentationValue StandardPayableMoisture = 4;
  }

  string UUID = 1;
  repeated listenfield.repo.common.CompoundIdentifier.UniqueId Ids = 2;
  Data data = 3;
  string Owner = 4;
  repeated listenfield.repo.common.ContextItem ContextItems = 300;
}


message CropZone {
  message Data {
    repeated string TimeScopeIds = 1;
    string Description = 2;
    string FieldId = 3;
    string CropId = 4;
    listenfield.repo.common.NumericRepresentationValue Area = 5;
    listenfield.repo.common.MultiPolygon BoundingRegion = 6;
    listenfield.repo.common.GpsSource BoundarySource = 7;
    repeated string NoteIds = 8;
    repeated string GuidanceGroupIds = 9;
  }

  string UUID = 1;
  repeated listenfield.repo.common.CompoundIdentifier.UniqueId Ids = 2;
  Data data = 3;
  string Owner = 4;
  repeated listenfield.repo.common.ContextItem ContextItems = 300;
}


message Person {
  message Data {
    string FirstName = 1;
    string MiddleName = 2;
    string LastName = 3;
    string CombinedName = 4;
    string ContactInfoId = 5;
  }

  string UUID = 1;
  repeated listenfield.repo.common.CompoundIdentifier.UniqueId Ids = 2;
  Data data = 3;
  string Owner = 4;
  repeated listenfield.repo.common.ContextItem ContextItems = 300;
}


message PersonRole {
  message PersonRolesEnum {
    enum Value {
      Unspecified = 0;
      Grower = 1;
      MarketProvider = 2;
      Customer = 3;
      Operator = 4;
      Owner = 5;
      FarmManager = 6;
      MarketAdvisor = 7;
      EndUser = 8;
      Financier = 9;
      InsuranceAgent = 10;
      GovernmentAgency = 11;
      FixedAssetSupplier = 12;
      MobileAssetSupplier = 13;
      InputSupplier = 14;
      IrrigationManager = 15;
      CropAdvisor = 16;
      CustomServiceProvider = 17;
      Laborer = 18;
      Transporter = 19;
      DataServicesProvider = 20;
      Authorizer = 21;
    }
  }
  message Data {
    string PersonId = 1;
    string GrowerId = 2;
    repeated string ActiveScopeIds = 3;
    PersonRolesEnum.Value Role = 4;
    string CompanyId = 5;
  }

  string UUID = 1;
  repeated listenfield.repo.common.CompoundIdentifier.UniqueId Ids = 2;
  Data data = 3;
  string Owner = 4;
  repeated listenfield.repo.common.ContextItem ContextItems = 300;
}


message Company {
  message Data {
    string Name = 1;
    string ContactInfoId = 2;
  }

  string UUID = 1;
  repeated listenfield.repo.common.CompoundIdentifier.UniqueId Ids = 2;
  Data data = 3;
  string Owner = 4;
  repeated listenfield.repo.common.ContextItem ContextItems = 300;
}
