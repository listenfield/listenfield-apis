/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var status_pb = require('./status_pb.js');
goog.exportSymbol('proto.listenfield.BatchedQueryMetadata', null, global);
goog.exportSymbol('proto.listenfield.BatchedQueryRequest', null, global);
goog.exportSymbol('proto.listenfield.ChangeGrantsRequest', null, global);
goog.exportSymbol('proto.listenfield.ChangeGrantsResult', null, global);
goog.exportSymbol('proto.listenfield.EchoMessage', null, global);
goog.exportSymbol('proto.listenfield.Grant', null, global);
goog.exportSymbol('proto.listenfield.Grant.TypeEnum', null, global);
goog.exportSymbol('proto.listenfield.Grant.TypeEnum.Value', null, global);
goog.exportSymbol('proto.listenfield.GrantList', null, global);
goog.exportSymbol('proto.listenfield.SimpleGetRequest', null, global);
goog.exportSymbol('proto.listenfield.SortCriterium', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.EchoMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.EchoMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.EchoMessage.displayName = 'proto.listenfield.EchoMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.EchoMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.EchoMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.EchoMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.EchoMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.EchoMessage}
 */
proto.listenfield.EchoMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.EchoMessage;
  return proto.listenfield.EchoMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.EchoMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.EchoMessage}
 */
proto.listenfield.EchoMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.EchoMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.EchoMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.EchoMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.EchoMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.listenfield.EchoMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.EchoMessage.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.SortCriterium = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.SortCriterium, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.SortCriterium.displayName = 'proto.listenfield.SortCriterium';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.SortCriterium.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.SortCriterium.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.SortCriterium} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.SortCriterium.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, ""),
    descending: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.SortCriterium}
 */
proto.listenfield.SortCriterium.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.SortCriterium;
  return proto.listenfield.SortCriterium.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.SortCriterium} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.SortCriterium}
 */
proto.listenfield.SortCriterium.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDescending(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.SortCriterium.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.SortCriterium.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.SortCriterium} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.SortCriterium.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescending();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string field = 1;
 * @return {string}
 */
proto.listenfield.SortCriterium.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.SortCriterium.prototype.setField = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool descending = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.listenfield.SortCriterium.prototype.getDescending = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.listenfield.SortCriterium.prototype.setDescending = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.BatchedQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listenfield.BatchedQueryRequest.repeatedFields_, null);
};
goog.inherits(proto.listenfield.BatchedQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.BatchedQueryRequest.displayName = 'proto.listenfield.BatchedQueryRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listenfield.BatchedQueryRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.BatchedQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.BatchedQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.BatchedQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.BatchedQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    search: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filter: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sortList: jspb.Message.toObjectList(msg.getSortList(),
    proto.listenfield.SortCriterium.toObject, includeInstance),
    pageSize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pageToken: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.BatchedQueryRequest}
 */
proto.listenfield.BatchedQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.BatchedQueryRequest;
  return proto.listenfield.BatchedQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.BatchedQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.BatchedQueryRequest}
 */
proto.listenfield.BatchedQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilter(value);
      break;
    case 3:
      var value = new proto.listenfield.SortCriterium;
      reader.readMessage(value,proto.listenfield.SortCriterium.deserializeBinaryFromReader);
      msg.addSort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPageSize(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.BatchedQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.BatchedQueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.BatchedQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.BatchedQueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearch();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilter();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSortList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.listenfield.SortCriterium.serializeBinaryToWriter
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string search = 1;
 * @return {string}
 */
proto.listenfield.BatchedQueryRequest.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.BatchedQueryRequest.prototype.setSearch = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string filter = 2;
 * @return {string}
 */
proto.listenfield.BatchedQueryRequest.prototype.getFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.listenfield.BatchedQueryRequest.prototype.setFilter = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated SortCriterium sort = 3;
 * @return {!Array.<!proto.listenfield.SortCriterium>}
 */
proto.listenfield.BatchedQueryRequest.prototype.getSortList = function() {
  return /** @type{!Array.<!proto.listenfield.SortCriterium>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listenfield.SortCriterium, 3));
};


/** @param {!Array.<!proto.listenfield.SortCriterium>} value */
proto.listenfield.BatchedQueryRequest.prototype.setSortList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.listenfield.SortCriterium=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listenfield.SortCriterium}
 */
proto.listenfield.BatchedQueryRequest.prototype.addSort = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.listenfield.SortCriterium, opt_index);
};


proto.listenfield.BatchedQueryRequest.prototype.clearSortList = function() {
  this.setSortList([]);
};


/**
 * optional uint32 page_size = 4;
 * @return {number}
 */
proto.listenfield.BatchedQueryRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.listenfield.BatchedQueryRequest.prototype.setPageSize = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string page_token = 5;
 * @return {string}
 */
proto.listenfield.BatchedQueryRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.listenfield.BatchedQueryRequest.prototype.setPageToken = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.BatchedQueryMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.BatchedQueryMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.BatchedQueryMetadata.displayName = 'proto.listenfield.BatchedQueryMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.BatchedQueryMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.BatchedQueryMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.BatchedQueryMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.BatchedQueryMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    pageToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    count: jspb.Message.getFieldWithDefault(msg, 3, 0),
    scanned: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.BatchedQueryMetadata}
 */
proto.listenfield.BatchedQueryMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.BatchedQueryMetadata;
  return proto.listenfield.BatchedQueryMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.BatchedQueryMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.BatchedQueryMetadata}
 */
proto.listenfield.BatchedQueryMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScanned(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.BatchedQueryMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.BatchedQueryMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.BatchedQueryMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.BatchedQueryMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getScanned();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string page_token = 2;
 * @return {string}
 */
proto.listenfield.BatchedQueryMetadata.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.listenfield.BatchedQueryMetadata.prototype.setPageToken = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 count = 3;
 * @return {number}
 */
proto.listenfield.BatchedQueryMetadata.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.listenfield.BatchedQueryMetadata.prototype.setCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 scanned = 4;
 * @return {number}
 */
proto.listenfield.BatchedQueryMetadata.prototype.getScanned = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.listenfield.BatchedQueryMetadata.prototype.setScanned = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.SimpleGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.SimpleGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.SimpleGetRequest.displayName = 'proto.listenfield.SimpleGetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.SimpleGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.SimpleGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.SimpleGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.SimpleGetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.SimpleGetRequest}
 */
proto.listenfield.SimpleGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.SimpleGetRequest;
  return proto.listenfield.SimpleGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.SimpleGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.SimpleGetRequest}
 */
proto.listenfield.SimpleGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.SimpleGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.SimpleGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.SimpleGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.SimpleGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.listenfield.SimpleGetRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.SimpleGetRequest.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.Grant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.Grant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.Grant.displayName = 'proto.listenfield.Grant';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.Grant.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.Grant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.Grant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.Grant.toObject = function(includeInstance, msg) {
  var f, obj = {
    grantee: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.Grant}
 */
proto.listenfield.Grant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.Grant;
  return proto.listenfield.Grant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.Grant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.Grant}
 */
proto.listenfield.Grant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrantee(value);
      break;
    case 2:
      var value = /** @type {!proto.listenfield.Grant.TypeEnum.Value} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.Grant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.Grant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.Grant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.Grant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrantee();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.Grant.TypeEnum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.Grant.TypeEnum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.Grant.TypeEnum.displayName = 'proto.listenfield.Grant.TypeEnum';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.Grant.TypeEnum.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.Grant.TypeEnum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.Grant.TypeEnum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.Grant.TypeEnum.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.Grant.TypeEnum}
 */
proto.listenfield.Grant.TypeEnum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.Grant.TypeEnum;
  return proto.listenfield.Grant.TypeEnum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.Grant.TypeEnum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.Grant.TypeEnum}
 */
proto.listenfield.Grant.TypeEnum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.Grant.TypeEnum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.Grant.TypeEnum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.Grant.TypeEnum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.Grant.TypeEnum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.listenfield.Grant.TypeEnum.Value = {
  INVALID: 0,
  READ: 1,
  WRITE: 2,
  GRANT: 3,
  CHOWN: 4
};

/**
 * optional string grantee = 1;
 * @return {string}
 */
proto.listenfield.Grant.prototype.getGrantee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.Grant.prototype.setGrantee = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional TypeEnum.Value type = 2;
 * @return {!proto.listenfield.Grant.TypeEnum.Value}
 */
proto.listenfield.Grant.prototype.getType = function() {
  return /** @type {!proto.listenfield.Grant.TypeEnum.Value} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.listenfield.Grant.TypeEnum.Value} value */
proto.listenfield.Grant.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.GrantList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listenfield.GrantList.repeatedFields_, null);
};
goog.inherits(proto.listenfield.GrantList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.GrantList.displayName = 'proto.listenfield.GrantList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listenfield.GrantList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.GrantList.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.GrantList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.GrantList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.GrantList.toObject = function(includeInstance, msg) {
  var f, obj = {
    grantsList: jspb.Message.toObjectList(msg.getGrantsList(),
    proto.listenfield.Grant.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.GrantList}
 */
proto.listenfield.GrantList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.GrantList;
  return proto.listenfield.GrantList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.GrantList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.GrantList}
 */
proto.listenfield.GrantList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.listenfield.Grant;
      reader.readMessage(value,proto.listenfield.Grant.deserializeBinaryFromReader);
      msg.addGrants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.GrantList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.GrantList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.GrantList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.GrantList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.listenfield.Grant.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Grant grants = 1;
 * @return {!Array.<!proto.listenfield.Grant>}
 */
proto.listenfield.GrantList.prototype.getGrantsList = function() {
  return /** @type{!Array.<!proto.listenfield.Grant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listenfield.Grant, 1));
};


/** @param {!Array.<!proto.listenfield.Grant>} value */
proto.listenfield.GrantList.prototype.setGrantsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.listenfield.Grant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listenfield.Grant}
 */
proto.listenfield.GrantList.prototype.addGrants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.listenfield.Grant, opt_index);
};


proto.listenfield.GrantList.prototype.clearGrantsList = function() {
  this.setGrantsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.ChangeGrantsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listenfield.ChangeGrantsRequest.repeatedFields_, null);
};
goog.inherits(proto.listenfield.ChangeGrantsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.ChangeGrantsRequest.displayName = 'proto.listenfield.ChangeGrantsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listenfield.ChangeGrantsRequest.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.ChangeGrantsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.ChangeGrantsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.ChangeGrantsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.ChangeGrantsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuidsList: jspb.Message.getRepeatedField(msg, 1),
    addList: jspb.Message.toObjectList(msg.getAddList(),
    proto.listenfield.Grant.toObject, includeInstance),
    removeList: jspb.Message.toObjectList(msg.getRemoveList(),
    proto.listenfield.Grant.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.ChangeGrantsRequest}
 */
proto.listenfield.ChangeGrantsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.ChangeGrantsRequest;
  return proto.listenfield.ChangeGrantsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.ChangeGrantsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.ChangeGrantsRequest}
 */
proto.listenfield.ChangeGrantsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUuids(value);
      break;
    case 2:
      var value = new proto.listenfield.Grant;
      reader.readMessage(value,proto.listenfield.Grant.deserializeBinaryFromReader);
      msg.addAdd(value);
      break;
    case 3:
      var value = new proto.listenfield.Grant;
      reader.readMessage(value,proto.listenfield.Grant.deserializeBinaryFromReader);
      msg.addRemove(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.ChangeGrantsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.ChangeGrantsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.ChangeGrantsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.ChangeGrantsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAddList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.listenfield.Grant.serializeBinaryToWriter
    );
  }
  f = message.getRemoveList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.listenfield.Grant.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string uuids = 1;
 * @return {!Array.<string>}
 */
proto.listenfield.ChangeGrantsRequest.prototype.getUuidsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.listenfield.ChangeGrantsRequest.prototype.setUuidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.listenfield.ChangeGrantsRequest.prototype.addUuids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.listenfield.ChangeGrantsRequest.prototype.clearUuidsList = function() {
  this.setUuidsList([]);
};


/**
 * repeated Grant add = 2;
 * @return {!Array.<!proto.listenfield.Grant>}
 */
proto.listenfield.ChangeGrantsRequest.prototype.getAddList = function() {
  return /** @type{!Array.<!proto.listenfield.Grant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listenfield.Grant, 2));
};


/** @param {!Array.<!proto.listenfield.Grant>} value */
proto.listenfield.ChangeGrantsRequest.prototype.setAddList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.listenfield.Grant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listenfield.Grant}
 */
proto.listenfield.ChangeGrantsRequest.prototype.addAdd = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.listenfield.Grant, opt_index);
};


proto.listenfield.ChangeGrantsRequest.prototype.clearAddList = function() {
  this.setAddList([]);
};


/**
 * repeated Grant remove = 3;
 * @return {!Array.<!proto.listenfield.Grant>}
 */
proto.listenfield.ChangeGrantsRequest.prototype.getRemoveList = function() {
  return /** @type{!Array.<!proto.listenfield.Grant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listenfield.Grant, 3));
};


/** @param {!Array.<!proto.listenfield.Grant>} value */
proto.listenfield.ChangeGrantsRequest.prototype.setRemoveList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.listenfield.Grant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listenfield.Grant}
 */
proto.listenfield.ChangeGrantsRequest.prototype.addRemove = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.listenfield.Grant, opt_index);
};


proto.listenfield.ChangeGrantsRequest.prototype.clearRemoveList = function() {
  this.setRemoveList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.ChangeGrantsResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listenfield.ChangeGrantsResult.repeatedFields_, null);
};
goog.inherits(proto.listenfield.ChangeGrantsResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.ChangeGrantsResult.displayName = 'proto.listenfield.ChangeGrantsResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listenfield.ChangeGrantsResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.ChangeGrantsResult.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.ChangeGrantsResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.ChangeGrantsResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.ChangeGrantsResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    grantsList: jspb.Message.toObjectList(msg.getGrantsList(),
    proto.listenfield.Grant.toObject, includeInstance),
    error: (f = msg.getError()) && status_pb.Status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.ChangeGrantsResult}
 */
proto.listenfield.ChangeGrantsResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.ChangeGrantsResult;
  return proto.listenfield.ChangeGrantsResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.ChangeGrantsResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.ChangeGrantsResult}
 */
proto.listenfield.ChangeGrantsResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.listenfield.Grant;
      reader.readMessage(value,proto.listenfield.Grant.deserializeBinaryFromReader);
      msg.addGrants(value);
      break;
    case 3:
      var value = new status_pb.Status;
      reader.readMessage(value,status_pb.Status.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.ChangeGrantsResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.ChangeGrantsResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.ChangeGrantsResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.ChangeGrantsResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGrantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.listenfield.Grant.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      status_pb.Status.serializeBinaryToWriter
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.listenfield.ChangeGrantsResult.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.ChangeGrantsResult.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Grant grants = 2;
 * @return {!Array.<!proto.listenfield.Grant>}
 */
proto.listenfield.ChangeGrantsResult.prototype.getGrantsList = function() {
  return /** @type{!Array.<!proto.listenfield.Grant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listenfield.Grant, 2));
};


/** @param {!Array.<!proto.listenfield.Grant>} value */
proto.listenfield.ChangeGrantsResult.prototype.setGrantsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.listenfield.Grant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listenfield.Grant}
 */
proto.listenfield.ChangeGrantsResult.prototype.addGrants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.listenfield.Grant, opt_index);
};


proto.listenfield.ChangeGrantsResult.prototype.clearGrantsList = function() {
  this.setGrantsList([]);
};


/**
 * optional google.rpc.Status error = 3;
 * @return {?proto.google.rpc.Status}
 */
proto.listenfield.ChangeGrantsResult.prototype.getError = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, status_pb.Status, 3));
};


/** @param {?proto.google.rpc.Status|undefined} value */
proto.listenfield.ChangeGrantsResult.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.listenfield.ChangeGrantsResult.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.ChangeGrantsResult.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.listenfield);
