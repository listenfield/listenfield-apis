/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.listenfield.repo.common.CompoundIdentifier', null, global);
goog.exportSymbol('proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum', null, global);
goog.exportSymbol('proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.Value', null, global);
goog.exportSymbol('proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum', null, global);
goog.exportSymbol('proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.Value', null, global);
goog.exportSymbol('proto.listenfield.repo.common.CompoundIdentifier.UniqueId', null, global);
goog.exportSymbol('proto.listenfield.repo.common.ContextItem', null, global);
goog.exportSymbol('proto.listenfield.repo.common.EnumeratedRepresentationValue', null, global);
goog.exportSymbol('proto.listenfield.repo.common.GpsSource', null, global);
goog.exportSymbol('proto.listenfield.repo.common.GpsSource.GpsSourceEnum', null, global);
goog.exportSymbol('proto.listenfield.repo.common.LinearRing', null, global);
goog.exportSymbol('proto.listenfield.repo.common.Location', null, global);
goog.exportSymbol('proto.listenfield.repo.common.MultiPolygon', null, global);
goog.exportSymbol('proto.listenfield.repo.common.NumericRepresentationValue', null, global);
goog.exportSymbol('proto.listenfield.repo.common.NumericValue', null, global);
goog.exportSymbol('proto.listenfield.repo.common.Point', null, global);
goog.exportSymbol('proto.listenfield.repo.common.Polygon', null, global);
goog.exportSymbol('proto.listenfield.repo.common.ShapeTypeEnum', null, global);
goog.exportSymbol('proto.listenfield.repo.common.ShapeTypeEnum.Value', null, global);
goog.exportSymbol('proto.listenfield.repo.common.StringRepresentationValue', null, global);
goog.exportSymbol('proto.listenfield.repo.common.TimeScope', null, global);
goog.exportSymbol('proto.listenfield.repo.common.TimeScope.Data', null, global);
goog.exportSymbol('proto.listenfield.repo.common.TimeScope.DateContextEnum', null, global);
goog.exportSymbol('proto.listenfield.repo.common.TimeScope.DateContextEnum.Value', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.CompoundIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listenfield.repo.common.CompoundIdentifier.repeatedFields_, null);
};
goog.inherits(proto.listenfield.repo.common.CompoundIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.CompoundIdentifier.displayName = 'proto.listenfield.repo.common.CompoundIdentifier';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listenfield.repo.common.CompoundIdentifier.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.CompoundIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.CompoundIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.CompoundIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.CompoundIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uniqueidsList: jspb.Message.toObjectList(msg.getUniqueidsList(),
    proto.listenfield.repo.common.CompoundIdentifier.UniqueId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.CompoundIdentifier}
 */
proto.listenfield.repo.common.CompoundIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.CompoundIdentifier;
  return proto.listenfield.repo.common.CompoundIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.CompoundIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.CompoundIdentifier}
 */
proto.listenfield.repo.common.CompoundIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = new proto.listenfield.repo.common.CompoundIdentifier.UniqueId;
      reader.readMessage(value,proto.listenfield.repo.common.CompoundIdentifier.UniqueId.deserializeBinaryFromReader);
      msg.addUniqueids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.CompoundIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.CompoundIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.CompoundIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.CompoundIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUniqueidsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.listenfield.repo.common.CompoundIdentifier.UniqueId.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.displayName = 'proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum}
 */
proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum;
  return proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum}
 */
proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.Value = {
  UUID: 0,
  STRING: 1,
  LONGINT: 2,
  URI: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.displayName = 'proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum}
 */
proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum;
  return proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum}
 */
proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.Value = {
  URI: 0,
  GLN: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.CompoundIdentifier.UniqueId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.CompoundIdentifier.UniqueId.displayName = 'proto.listenfield.repo.common.CompoundIdentifier.UniqueId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.CompoundIdentifier.UniqueId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.CompoundIdentifier.UniqueId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    identifiertype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    source: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sourcetype: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.CompoundIdentifier.UniqueId}
 */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.CompoundIdentifier.UniqueId;
  return proto.listenfield.repo.common.CompoundIdentifier.UniqueId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.CompoundIdentifier.UniqueId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.CompoundIdentifier.UniqueId}
 */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.Value} */ (reader.readEnum());
      msg.setIdentifiertype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 4:
      var value = /** @type {!proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.Value} */ (reader.readEnum());
      msg.setSourcetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.CompoundIdentifier.UniqueId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.CompoundIdentifier.UniqueId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdentifiertype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSourcetype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional CompoundIdentifierTypeEnum.Value identifierType = 2;
 * @return {!proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.Value}
 */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.prototype.getIdentifiertype = function() {
  return /** @type {!proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.Value} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.listenfield.repo.common.CompoundIdentifier.CompoundIdentifierTypeEnum.Value} value */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.prototype.setIdentifiertype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string source = 3;
 * @return {string}
 */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.prototype.setSource = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional IdSourceTypeEnum.Value sourceType = 4;
 * @return {!proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.Value}
 */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.prototype.getSourcetype = function() {
  return /** @type {!proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.Value} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.listenfield.repo.common.CompoundIdentifier.IdSourceTypeEnum.Value} value */
proto.listenfield.repo.common.CompoundIdentifier.UniqueId.prototype.setSourcetype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.listenfield.repo.common.CompoundIdentifier.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.CompoundIdentifier.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated UniqueId uniqueIds = 2;
 * @return {!Array.<!proto.listenfield.repo.common.CompoundIdentifier.UniqueId>}
 */
proto.listenfield.repo.common.CompoundIdentifier.prototype.getUniqueidsList = function() {
  return /** @type{!Array.<!proto.listenfield.repo.common.CompoundIdentifier.UniqueId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listenfield.repo.common.CompoundIdentifier.UniqueId, 2));
};


/** @param {!Array.<!proto.listenfield.repo.common.CompoundIdentifier.UniqueId>} value */
proto.listenfield.repo.common.CompoundIdentifier.prototype.setUniqueidsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.listenfield.repo.common.CompoundIdentifier.UniqueId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listenfield.repo.common.CompoundIdentifier.UniqueId}
 */
proto.listenfield.repo.common.CompoundIdentifier.prototype.addUniqueids = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.listenfield.repo.common.CompoundIdentifier.UniqueId, opt_index);
};


proto.listenfield.repo.common.CompoundIdentifier.prototype.clearUniqueidsList = function() {
  this.setUniqueidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.NumericValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.NumericValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.NumericValue.displayName = 'proto.listenfield.repo.common.NumericValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.NumericValue.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.NumericValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.NumericValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.NumericValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    unitofmeasureid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.NumericValue}
 */
proto.listenfield.repo.common.NumericValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.NumericValue;
  return proto.listenfield.repo.common.NumericValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.NumericValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.NumericValue}
 */
proto.listenfield.repo.common.NumericValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitofmeasureid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.NumericValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.NumericValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.NumericValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.NumericValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getUnitofmeasureid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.listenfield.repo.common.NumericValue.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.listenfield.repo.common.NumericValue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string unitOfMeasureId = 2;
 * @return {string}
 */
proto.listenfield.repo.common.NumericValue.prototype.getUnitofmeasureid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.NumericValue.prototype.setUnitofmeasureid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.NumericRepresentationValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.NumericRepresentationValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.NumericRepresentationValue.displayName = 'proto.listenfield.repo.common.NumericRepresentationValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.NumericRepresentationValue.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.NumericRepresentationValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.NumericRepresentationValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.NumericRepresentationValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    representationid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.listenfield.repo.common.NumericValue.toObject(includeInstance, f),
    unitofmeasureid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.NumericRepresentationValue}
 */
proto.listenfield.repo.common.NumericRepresentationValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.NumericRepresentationValue;
  return proto.listenfield.repo.common.NumericRepresentationValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.NumericRepresentationValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.NumericRepresentationValue}
 */
proto.listenfield.repo.common.NumericRepresentationValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepresentationid(value);
      break;
    case 2:
      var value = new proto.listenfield.repo.common.NumericValue;
      reader.readMessage(value,proto.listenfield.repo.common.NumericValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitofmeasureid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.NumericRepresentationValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.NumericRepresentationValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.NumericRepresentationValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.NumericRepresentationValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRepresentationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.listenfield.repo.common.NumericValue.serializeBinaryToWriter
    );
  }
  f = message.getUnitofmeasureid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string representationId = 1;
 * @return {string}
 */
proto.listenfield.repo.common.NumericRepresentationValue.prototype.getRepresentationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.NumericRepresentationValue.prototype.setRepresentationid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional NumericValue value = 2;
 * @return {?proto.listenfield.repo.common.NumericValue}
 */
proto.listenfield.repo.common.NumericRepresentationValue.prototype.getValue = function() {
  return /** @type{?proto.listenfield.repo.common.NumericValue} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.NumericValue, 2));
};


/** @param {?proto.listenfield.repo.common.NumericValue|undefined} value */
proto.listenfield.repo.common.NumericRepresentationValue.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.listenfield.repo.common.NumericRepresentationValue.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.NumericRepresentationValue.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string unitOfMeasureId = 3;
 * @return {string}
 */
proto.listenfield.repo.common.NumericRepresentationValue.prototype.getUnitofmeasureid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.NumericRepresentationValue.prototype.setUnitofmeasureid = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.StringRepresentationValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.StringRepresentationValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.StringRepresentationValue.displayName = 'proto.listenfield.repo.common.StringRepresentationValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.StringRepresentationValue.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.StringRepresentationValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.StringRepresentationValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.StringRepresentationValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    representationid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitofmeasureid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.StringRepresentationValue}
 */
proto.listenfield.repo.common.StringRepresentationValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.StringRepresentationValue;
  return proto.listenfield.repo.common.StringRepresentationValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.StringRepresentationValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.StringRepresentationValue}
 */
proto.listenfield.repo.common.StringRepresentationValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepresentationid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitofmeasureid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.StringRepresentationValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.StringRepresentationValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.StringRepresentationValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.StringRepresentationValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRepresentationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitofmeasureid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string representationId = 1;
 * @return {string}
 */
proto.listenfield.repo.common.StringRepresentationValue.prototype.getRepresentationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.StringRepresentationValue.prototype.setRepresentationid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.listenfield.repo.common.StringRepresentationValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.StringRepresentationValue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string unitOfMeasureId = 3;
 * @return {string}
 */
proto.listenfield.repo.common.StringRepresentationValue.prototype.getUnitofmeasureid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.StringRepresentationValue.prototype.setUnitofmeasureid = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.EnumeratedRepresentationValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.EnumeratedRepresentationValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.EnumeratedRepresentationValue.displayName = 'proto.listenfield.repo.common.EnumeratedRepresentationValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.EnumeratedRepresentationValue.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.EnumeratedRepresentationValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.EnumeratedRepresentationValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.EnumeratedRepresentationValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    representationid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitofmeasureid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.EnumeratedRepresentationValue}
 */
proto.listenfield.repo.common.EnumeratedRepresentationValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.EnumeratedRepresentationValue;
  return proto.listenfield.repo.common.EnumeratedRepresentationValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.EnumeratedRepresentationValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.EnumeratedRepresentationValue}
 */
proto.listenfield.repo.common.EnumeratedRepresentationValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepresentationid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitofmeasureid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.EnumeratedRepresentationValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.EnumeratedRepresentationValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.EnumeratedRepresentationValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.EnumeratedRepresentationValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRepresentationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitofmeasureid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string representationId = 1;
 * @return {string}
 */
proto.listenfield.repo.common.EnumeratedRepresentationValue.prototype.getRepresentationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.EnumeratedRepresentationValue.prototype.setRepresentationid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.listenfield.repo.common.EnumeratedRepresentationValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.EnumeratedRepresentationValue.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string unitOfMeasureId = 3;
 * @return {string}
 */
proto.listenfield.repo.common.EnumeratedRepresentationValue.prototype.getUnitofmeasureid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.EnumeratedRepresentationValue.prototype.setUnitofmeasureid = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.ContextItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listenfield.repo.common.ContextItem.repeatedFields_, proto.listenfield.repo.common.ContextItem.oneofGroups_);
};
goog.inherits(proto.listenfield.repo.common.ContextItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.ContextItem.displayName = 'proto.listenfield.repo.common.ContextItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listenfield.repo.common.ContextItem.repeatedFields_ = [5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.listenfield.repo.common.ContextItem.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.listenfield.repo.common.ContextItem.RepresentationValueCase = {
  REPRESENTATION_VALUE_NOT_SET: 0,
  NUMERICREPRESENTATIONVALUE: 2,
  STRINGREPRESENTATIONVALUE: 3,
  ENUMERATEDREPRESENTATIONVALUE: 4
};

/**
 * @return {proto.listenfield.repo.common.ContextItem.RepresentationValueCase}
 */
proto.listenfield.repo.common.ContextItem.prototype.getRepresentationValueCase = function() {
  return /** @type {proto.listenfield.repo.common.ContextItem.RepresentationValueCase} */(jspb.Message.computeOneofCase(this, proto.listenfield.repo.common.ContextItem.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.ContextItem.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.ContextItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.ContextItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.ContextItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    contextitemtype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    numericrepresentationvalue: (f = msg.getNumericrepresentationvalue()) && proto.listenfield.repo.common.NumericRepresentationValue.toObject(includeInstance, f),
    stringrepresentationvalue: (f = msg.getStringrepresentationvalue()) && proto.listenfield.repo.common.StringRepresentationValue.toObject(includeInstance, f),
    enumeratedrepresentationvalue: (f = msg.getEnumeratedrepresentationvalue()) && proto.listenfield.repo.common.EnumeratedRepresentationValue.toObject(includeInstance, f),
    contextitemsList: jspb.Message.toObjectList(msg.getContextitemsList(),
    proto.listenfield.repo.common.ContextItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.ContextItem}
 */
proto.listenfield.repo.common.ContextItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.ContextItem;
  return proto.listenfield.repo.common.ContextItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.ContextItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.ContextItem}
 */
proto.listenfield.repo.common.ContextItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContextitemtype(value);
      break;
    case 2:
      var value = new proto.listenfield.repo.common.NumericRepresentationValue;
      reader.readMessage(value,proto.listenfield.repo.common.NumericRepresentationValue.deserializeBinaryFromReader);
      msg.setNumericrepresentationvalue(value);
      break;
    case 3:
      var value = new proto.listenfield.repo.common.StringRepresentationValue;
      reader.readMessage(value,proto.listenfield.repo.common.StringRepresentationValue.deserializeBinaryFromReader);
      msg.setStringrepresentationvalue(value);
      break;
    case 4:
      var value = new proto.listenfield.repo.common.EnumeratedRepresentationValue;
      reader.readMessage(value,proto.listenfield.repo.common.EnumeratedRepresentationValue.deserializeBinaryFromReader);
      msg.setEnumeratedrepresentationvalue(value);
      break;
    case 5:
      var value = new proto.listenfield.repo.common.ContextItem;
      reader.readMessage(value,proto.listenfield.repo.common.ContextItem.deserializeBinaryFromReader);
      msg.addContextitems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.ContextItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.ContextItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.ContextItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.ContextItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContextitemtype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumericrepresentationvalue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.listenfield.repo.common.NumericRepresentationValue.serializeBinaryToWriter
    );
  }
  f = message.getStringrepresentationvalue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.listenfield.repo.common.StringRepresentationValue.serializeBinaryToWriter
    );
  }
  f = message.getEnumeratedrepresentationvalue();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.listenfield.repo.common.EnumeratedRepresentationValue.serializeBinaryToWriter
    );
  }
  f = message.getContextitemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.listenfield.repo.common.ContextItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contextItemType = 1;
 * @return {string}
 */
proto.listenfield.repo.common.ContextItem.prototype.getContextitemtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.ContextItem.prototype.setContextitemtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional NumericRepresentationValue numericRepresentationValue = 2;
 * @return {?proto.listenfield.repo.common.NumericRepresentationValue}
 */
proto.listenfield.repo.common.ContextItem.prototype.getNumericrepresentationvalue = function() {
  return /** @type{?proto.listenfield.repo.common.NumericRepresentationValue} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.NumericRepresentationValue, 2));
};


/** @param {?proto.listenfield.repo.common.NumericRepresentationValue|undefined} value */
proto.listenfield.repo.common.ContextItem.prototype.setNumericrepresentationvalue = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.listenfield.repo.common.ContextItem.oneofGroups_[0], value);
};


proto.listenfield.repo.common.ContextItem.prototype.clearNumericrepresentationvalue = function() {
  this.setNumericrepresentationvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.ContextItem.prototype.hasNumericrepresentationvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StringRepresentationValue stringRepresentationValue = 3;
 * @return {?proto.listenfield.repo.common.StringRepresentationValue}
 */
proto.listenfield.repo.common.ContextItem.prototype.getStringrepresentationvalue = function() {
  return /** @type{?proto.listenfield.repo.common.StringRepresentationValue} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.StringRepresentationValue, 3));
};


/** @param {?proto.listenfield.repo.common.StringRepresentationValue|undefined} value */
proto.listenfield.repo.common.ContextItem.prototype.setStringrepresentationvalue = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.listenfield.repo.common.ContextItem.oneofGroups_[0], value);
};


proto.listenfield.repo.common.ContextItem.prototype.clearStringrepresentationvalue = function() {
  this.setStringrepresentationvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.ContextItem.prototype.hasStringrepresentationvalue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EnumeratedRepresentationValue enumeratedRepresentationValue = 4;
 * @return {?proto.listenfield.repo.common.EnumeratedRepresentationValue}
 */
proto.listenfield.repo.common.ContextItem.prototype.getEnumeratedrepresentationvalue = function() {
  return /** @type{?proto.listenfield.repo.common.EnumeratedRepresentationValue} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.EnumeratedRepresentationValue, 4));
};


/** @param {?proto.listenfield.repo.common.EnumeratedRepresentationValue|undefined} value */
proto.listenfield.repo.common.ContextItem.prototype.setEnumeratedrepresentationvalue = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.listenfield.repo.common.ContextItem.oneofGroups_[0], value);
};


proto.listenfield.repo.common.ContextItem.prototype.clearEnumeratedrepresentationvalue = function() {
  this.setEnumeratedrepresentationvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.ContextItem.prototype.hasEnumeratedrepresentationvalue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated ContextItem contextItems = 5;
 * @return {!Array.<!proto.listenfield.repo.common.ContextItem>}
 */
proto.listenfield.repo.common.ContextItem.prototype.getContextitemsList = function() {
  return /** @type{!Array.<!proto.listenfield.repo.common.ContextItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listenfield.repo.common.ContextItem, 5));
};


/** @param {!Array.<!proto.listenfield.repo.common.ContextItem>} value */
proto.listenfield.repo.common.ContextItem.prototype.setContextitemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.listenfield.repo.common.ContextItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listenfield.repo.common.ContextItem}
 */
proto.listenfield.repo.common.ContextItem.prototype.addContextitems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.listenfield.repo.common.ContextItem, opt_index);
};


proto.listenfield.repo.common.ContextItem.prototype.clearContextitemsList = function() {
  this.setContextitemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.TimeScope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listenfield.repo.common.TimeScope.repeatedFields_, null);
};
goog.inherits(proto.listenfield.repo.common.TimeScope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.TimeScope.displayName = 'proto.listenfield.repo.common.TimeScope';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listenfield.repo.common.TimeScope.repeatedFields_ = [300];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.TimeScope.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.TimeScope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.TimeScope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.TimeScope.toObject = function(includeInstance, msg) {
  var f, obj = {
    ids: (f = msg.getIds()) && proto.listenfield.repo.common.CompoundIdentifier.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.listenfield.repo.common.TimeScope.Data.toObject(includeInstance, f),
    owner: jspb.Message.getFieldWithDefault(msg, 3, ""),
    contextitemsList: jspb.Message.toObjectList(msg.getContextitemsList(),
    proto.listenfield.repo.common.ContextItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.TimeScope}
 */
proto.listenfield.repo.common.TimeScope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.TimeScope;
  return proto.listenfield.repo.common.TimeScope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.TimeScope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.TimeScope}
 */
proto.listenfield.repo.common.TimeScope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.listenfield.repo.common.CompoundIdentifier;
      reader.readMessage(value,proto.listenfield.repo.common.CompoundIdentifier.deserializeBinaryFromReader);
      msg.setIds(value);
      break;
    case 2:
      var value = new proto.listenfield.repo.common.TimeScope.Data;
      reader.readMessage(value,proto.listenfield.repo.common.TimeScope.Data.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 300:
      var value = new proto.listenfield.repo.common.ContextItem;
      reader.readMessage(value,proto.listenfield.repo.common.ContextItem.deserializeBinaryFromReader);
      msg.addContextitems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.TimeScope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.TimeScope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.TimeScope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.TimeScope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.listenfield.repo.common.CompoundIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.listenfield.repo.common.TimeScope.Data.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContextitemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      300,
      f,
      proto.listenfield.repo.common.ContextItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.TimeScope.DateContextEnum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.TimeScope.DateContextEnum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.TimeScope.DateContextEnum.displayName = 'proto.listenfield.repo.common.TimeScope.DateContextEnum';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.TimeScope.DateContextEnum.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.TimeScope.DateContextEnum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.TimeScope.DateContextEnum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.TimeScope.DateContextEnum.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.TimeScope.DateContextEnum}
 */
proto.listenfield.repo.common.TimeScope.DateContextEnum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.TimeScope.DateContextEnum;
  return proto.listenfield.repo.common.TimeScope.DateContextEnum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.TimeScope.DateContextEnum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.TimeScope.DateContextEnum}
 */
proto.listenfield.repo.common.TimeScope.DateContextEnum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.TimeScope.DateContextEnum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.TimeScope.DateContextEnum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.TimeScope.DateContextEnum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.TimeScope.DateContextEnum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.listenfield.repo.common.TimeScope.DateContextEnum.Value = {
  UNSPECIFIED: 0,
  APPROVAL: 1,
  PROPOSEDSTART: 2,
  PROPOSEDEND: 3,
  CROPSEASON: 4,
  TIMINGEVENT: 5,
  ACTUALSTART: 6,
  ACTUALEND: 7,
  REQUESTEDSTART: 8,
  REQUESTEDEND: 9,
  EXPIRATION: 10,
  CREATION: 11,
  MODIFICATION: 12,
  VALIDITYRANGE: 13,
  REQUESTEDSHIPPING: 14,
  ACTUALSHIPPING: 15,
  CALIBRATION: 16,
  LOAD: 17,
  UNLOAD: 18,
  SUSPEND: 19,
  RESUME: 20
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.TimeScope.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.TimeScope.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.TimeScope.Data.displayName = 'proto.listenfield.repo.common.TimeScope.Data';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.TimeScope.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.TimeScope.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.TimeScope.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, ""),
    datecontext: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp1: (f = msg.getTimestamp1()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    timestamp2: (f = msg.getTimestamp2()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    location1: (f = msg.getLocation1()) && proto.listenfield.repo.common.Location.toObject(includeInstance, f),
    location2: (f = msg.getLocation2()) && proto.listenfield.repo.common.Location.toObject(includeInstance, f),
    duration: (f = msg.getDuration()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.TimeScope.Data}
 */
proto.listenfield.repo.common.TimeScope.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.TimeScope.Data;
  return proto.listenfield.repo.common.TimeScope.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.TimeScope.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.TimeScope.Data}
 */
proto.listenfield.repo.common.TimeScope.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {!proto.listenfield.repo.common.TimeScope.DateContextEnum.Value} */ (reader.readEnum());
      msg.setDatecontext(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp1(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp2(value);
      break;
    case 5:
      var value = new proto.listenfield.repo.common.Location;
      reader.readMessage(value,proto.listenfield.repo.common.Location.deserializeBinaryFromReader);
      msg.setLocation1(value);
      break;
    case 6:
      var value = new proto.listenfield.repo.common.Location;
      reader.readMessage(value,proto.listenfield.repo.common.Location.deserializeBinaryFromReader);
      msg.setLocation2(value);
      break;
    case 7:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.TimeScope.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.TimeScope.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.TimeScope.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDatecontext();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTimestamp1();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp2();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLocation1();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.listenfield.repo.common.Location.serializeBinaryToWriter
    );
  }
  f = message.getLocation2();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.listenfield.repo.common.Location.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.TimeScope.Data.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional DateContextEnum.Value dateContext = 2;
 * @return {!proto.listenfield.repo.common.TimeScope.DateContextEnum.Value}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.getDatecontext = function() {
  return /** @type {!proto.listenfield.repo.common.TimeScope.DateContextEnum.Value} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.listenfield.repo.common.TimeScope.DateContextEnum.Value} value */
proto.listenfield.repo.common.TimeScope.Data.prototype.setDatecontext = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timeStamp1 = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.getTimestamp1 = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.listenfield.repo.common.TimeScope.Data.prototype.setTimestamp1 = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.listenfield.repo.common.TimeScope.Data.prototype.clearTimestamp1 = function() {
  this.setTimestamp1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.hasTimestamp1 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp timeStamp2 = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.getTimestamp2 = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.listenfield.repo.common.TimeScope.Data.prototype.setTimestamp2 = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.listenfield.repo.common.TimeScope.Data.prototype.clearTimestamp2 = function() {
  this.setTimestamp2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.hasTimestamp2 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Location location1 = 5;
 * @return {?proto.listenfield.repo.common.Location}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.getLocation1 = function() {
  return /** @type{?proto.listenfield.repo.common.Location} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.Location, 5));
};


/** @param {?proto.listenfield.repo.common.Location|undefined} value */
proto.listenfield.repo.common.TimeScope.Data.prototype.setLocation1 = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.listenfield.repo.common.TimeScope.Data.prototype.clearLocation1 = function() {
  this.setLocation1(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.hasLocation1 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Location location2 = 6;
 * @return {?proto.listenfield.repo.common.Location}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.getLocation2 = function() {
  return /** @type{?proto.listenfield.repo.common.Location} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.Location, 6));
};


/** @param {?proto.listenfield.repo.common.Location|undefined} value */
proto.listenfield.repo.common.TimeScope.Data.prototype.setLocation2 = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.listenfield.repo.common.TimeScope.Data.prototype.clearLocation2 = function() {
  this.setLocation2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.hasLocation2 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.Duration duration = 7;
 * @return {?proto.google.protobuf.Duration}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.getDuration = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 7));
};


/** @param {?proto.google.protobuf.Duration|undefined} value */
proto.listenfield.repo.common.TimeScope.Data.prototype.setDuration = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.listenfield.repo.common.TimeScope.Data.prototype.clearDuration = function() {
  this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.TimeScope.Data.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CompoundIdentifier ids = 1;
 * @return {?proto.listenfield.repo.common.CompoundIdentifier}
 */
proto.listenfield.repo.common.TimeScope.prototype.getIds = function() {
  return /** @type{?proto.listenfield.repo.common.CompoundIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.CompoundIdentifier, 1));
};


/** @param {?proto.listenfield.repo.common.CompoundIdentifier|undefined} value */
proto.listenfield.repo.common.TimeScope.prototype.setIds = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.listenfield.repo.common.TimeScope.prototype.clearIds = function() {
  this.setIds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.TimeScope.prototype.hasIds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Data data = 2;
 * @return {?proto.listenfield.repo.common.TimeScope.Data}
 */
proto.listenfield.repo.common.TimeScope.prototype.getData = function() {
  return /** @type{?proto.listenfield.repo.common.TimeScope.Data} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.TimeScope.Data, 2));
};


/** @param {?proto.listenfield.repo.common.TimeScope.Data|undefined} value */
proto.listenfield.repo.common.TimeScope.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.listenfield.repo.common.TimeScope.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.TimeScope.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string owner = 3;
 * @return {string}
 */
proto.listenfield.repo.common.TimeScope.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.TimeScope.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated ContextItem contextItems = 300;
 * @return {!Array.<!proto.listenfield.repo.common.ContextItem>}
 */
proto.listenfield.repo.common.TimeScope.prototype.getContextitemsList = function() {
  return /** @type{!Array.<!proto.listenfield.repo.common.ContextItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listenfield.repo.common.ContextItem, 300));
};


/** @param {!Array.<!proto.listenfield.repo.common.ContextItem>} value */
proto.listenfield.repo.common.TimeScope.prototype.setContextitemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 300, value);
};


/**
 * @param {!proto.listenfield.repo.common.ContextItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listenfield.repo.common.ContextItem}
 */
proto.listenfield.repo.common.TimeScope.prototype.addContextitems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 300, opt_value, proto.listenfield.repo.common.ContextItem, opt_index);
};


proto.listenfield.repo.common.TimeScope.prototype.clearContextitemsList = function() {
  this.setContextitemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.Point.displayName = 'proto.listenfield.repo.common.Point';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    z: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.Point}
 */
proto.listenfield.repo.common.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.Point;
  return proto.listenfield.repo.common.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.Point}
 */
proto.listenfield.repo.common.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getZ();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double x = 1;
 * @return {number}
 */
proto.listenfield.repo.common.Point.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.listenfield.repo.common.Point.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.listenfield.repo.common.Point.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.listenfield.repo.common.Point.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double z = 3;
 * @return {number}
 */
proto.listenfield.repo.common.Point.prototype.getZ = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.listenfield.repo.common.Point.prototype.setZ = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.GpsSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.GpsSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.GpsSource.displayName = 'proto.listenfield.repo.common.GpsSource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.GpsSource.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.GpsSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.GpsSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.GpsSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    estimatedprecision: (f = msg.getEstimatedprecision()) && proto.listenfield.repo.common.NumericRepresentationValue.toObject(includeInstance, f),
    horizontalaccuracy: (f = msg.getHorizontalaccuracy()) && proto.listenfield.repo.common.NumericRepresentationValue.toObject(includeInstance, f),
    verticalaccuracy: (f = msg.getVerticalaccuracy()) && proto.listenfield.repo.common.NumericRepresentationValue.toObject(includeInstance, f),
    numberofsatellites: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gpsutctime: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.GpsSource}
 */
proto.listenfield.repo.common.GpsSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.GpsSource;
  return proto.listenfield.repo.common.GpsSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.GpsSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.GpsSource}
 */
proto.listenfield.repo.common.GpsSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.listenfield.repo.common.GpsSource.GpsSourceEnum} */ (reader.readEnum());
      msg.setSourcetype(value);
      break;
    case 2:
      var value = new proto.listenfield.repo.common.NumericRepresentationValue;
      reader.readMessage(value,proto.listenfield.repo.common.NumericRepresentationValue.deserializeBinaryFromReader);
      msg.setEstimatedprecision(value);
      break;
    case 3:
      var value = new proto.listenfield.repo.common.NumericRepresentationValue;
      reader.readMessage(value,proto.listenfield.repo.common.NumericRepresentationValue.deserializeBinaryFromReader);
      msg.setHorizontalaccuracy(value);
      break;
    case 4:
      var value = new proto.listenfield.repo.common.NumericRepresentationValue;
      reader.readMessage(value,proto.listenfield.repo.common.NumericRepresentationValue.deserializeBinaryFromReader);
      msg.setVerticalaccuracy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumberofsatellites(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGpsutctime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.GpsSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.GpsSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.GpsSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.GpsSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEstimatedprecision();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.listenfield.repo.common.NumericRepresentationValue.serializeBinaryToWriter
    );
  }
  f = message.getHorizontalaccuracy();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.listenfield.repo.common.NumericRepresentationValue.serializeBinaryToWriter
    );
  }
  f = message.getVerticalaccuracy();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.listenfield.repo.common.NumericRepresentationValue.serializeBinaryToWriter
    );
  }
  f = message.getNumberofsatellites();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getGpsutctime();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.listenfield.repo.common.GpsSource.GpsSourceEnum = {
  UNKNOWN: 0,
  DRAWN: 1,
  MOBILEGPS: 2,
  DEERERTK: 3,
  DEERERTKX: 4,
  DEERESF1: 5,
  DEERESF2: 6,
  DEEREWAAS: 7,
  GNSSFIX: 8,
  DGNSSFIX: 9,
  PRECISEGNSS: 10,
  RTKFIXEDINTEGER: 11,
  RTKFLOAT: 12,
  ESTDRMODE: 13,
  MANUALINPUT: 14,
  SIMULATEMODE: 15,
  DESKTOPGENERATEDDATA: 16,
  OTHER: 17
};

/**
 * optional GpsSourceEnum sourceType = 1;
 * @return {!proto.listenfield.repo.common.GpsSource.GpsSourceEnum}
 */
proto.listenfield.repo.common.GpsSource.prototype.getSourcetype = function() {
  return /** @type {!proto.listenfield.repo.common.GpsSource.GpsSourceEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.listenfield.repo.common.GpsSource.GpsSourceEnum} value */
proto.listenfield.repo.common.GpsSource.prototype.setSourcetype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional NumericRepresentationValue estimatedPrecision = 2;
 * @return {?proto.listenfield.repo.common.NumericRepresentationValue}
 */
proto.listenfield.repo.common.GpsSource.prototype.getEstimatedprecision = function() {
  return /** @type{?proto.listenfield.repo.common.NumericRepresentationValue} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.NumericRepresentationValue, 2));
};


/** @param {?proto.listenfield.repo.common.NumericRepresentationValue|undefined} value */
proto.listenfield.repo.common.GpsSource.prototype.setEstimatedprecision = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.listenfield.repo.common.GpsSource.prototype.clearEstimatedprecision = function() {
  this.setEstimatedprecision(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.GpsSource.prototype.hasEstimatedprecision = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NumericRepresentationValue horizontalAccuracy = 3;
 * @return {?proto.listenfield.repo.common.NumericRepresentationValue}
 */
proto.listenfield.repo.common.GpsSource.prototype.getHorizontalaccuracy = function() {
  return /** @type{?proto.listenfield.repo.common.NumericRepresentationValue} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.NumericRepresentationValue, 3));
};


/** @param {?proto.listenfield.repo.common.NumericRepresentationValue|undefined} value */
proto.listenfield.repo.common.GpsSource.prototype.setHorizontalaccuracy = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.listenfield.repo.common.GpsSource.prototype.clearHorizontalaccuracy = function() {
  this.setHorizontalaccuracy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.GpsSource.prototype.hasHorizontalaccuracy = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NumericRepresentationValue verticalAccuracy = 4;
 * @return {?proto.listenfield.repo.common.NumericRepresentationValue}
 */
proto.listenfield.repo.common.GpsSource.prototype.getVerticalaccuracy = function() {
  return /** @type{?proto.listenfield.repo.common.NumericRepresentationValue} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.NumericRepresentationValue, 4));
};


/** @param {?proto.listenfield.repo.common.NumericRepresentationValue|undefined} value */
proto.listenfield.repo.common.GpsSource.prototype.setVerticalaccuracy = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.listenfield.repo.common.GpsSource.prototype.clearVerticalaccuracy = function() {
  this.setVerticalaccuracy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.GpsSource.prototype.hasVerticalaccuracy = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 numberOfSatellites = 5;
 * @return {number}
 */
proto.listenfield.repo.common.GpsSource.prototype.getNumberofsatellites = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.listenfield.repo.common.GpsSource.prototype.setNumberofsatellites = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string gpsUTCTime = 6;
 * @return {string}
 */
proto.listenfield.repo.common.GpsSource.prototype.getGpsutctime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.listenfield.repo.common.GpsSource.prototype.setGpsutctime = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.ShapeTypeEnum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.ShapeTypeEnum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.ShapeTypeEnum.displayName = 'proto.listenfield.repo.common.ShapeTypeEnum';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.ShapeTypeEnum.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.ShapeTypeEnum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.ShapeTypeEnum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.ShapeTypeEnum.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.ShapeTypeEnum}
 */
proto.listenfield.repo.common.ShapeTypeEnum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.ShapeTypeEnum;
  return proto.listenfield.repo.common.ShapeTypeEnum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.ShapeTypeEnum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.ShapeTypeEnum}
 */
proto.listenfield.repo.common.ShapeTypeEnum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.ShapeTypeEnum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.ShapeTypeEnum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.ShapeTypeEnum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.ShapeTypeEnum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.listenfield.repo.common.ShapeTypeEnum.Value = {
  LINEARRING: 0,
  LINESTRING: 1,
  MULTILINESTRING: 2,
  MULTIPOINT: 3,
  MULTIPOLYGON: 4,
  POINT: 5,
  POLYGON: 6,
  RASTERGRID: 7
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.LinearRing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listenfield.repo.common.LinearRing.repeatedFields_, null);
};
goog.inherits(proto.listenfield.repo.common.LinearRing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.LinearRing.displayName = 'proto.listenfield.repo.common.LinearRing';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listenfield.repo.common.LinearRing.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.LinearRing.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.LinearRing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.LinearRing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.LinearRing.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.listenfield.repo.common.Point.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.LinearRing}
 */
proto.listenfield.repo.common.LinearRing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.LinearRing;
  return proto.listenfield.repo.common.LinearRing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.LinearRing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.LinearRing}
 */
proto.listenfield.repo.common.LinearRing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.listenfield.repo.common.Point;
      reader.readMessage(value,proto.listenfield.repo.common.Point.deserializeBinaryFromReader);
      msg.addPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.LinearRing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.LinearRing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.LinearRing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.LinearRing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.listenfield.repo.common.Point.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Point points = 1;
 * @return {!Array.<!proto.listenfield.repo.common.Point>}
 */
proto.listenfield.repo.common.LinearRing.prototype.getPointsList = function() {
  return /** @type{!Array.<!proto.listenfield.repo.common.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listenfield.repo.common.Point, 1));
};


/** @param {!Array.<!proto.listenfield.repo.common.Point>} value */
proto.listenfield.repo.common.LinearRing.prototype.setPointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.listenfield.repo.common.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listenfield.repo.common.Point}
 */
proto.listenfield.repo.common.LinearRing.prototype.addPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.listenfield.repo.common.Point, opt_index);
};


proto.listenfield.repo.common.LinearRing.prototype.clearPointsList = function() {
  this.setPointsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.Polygon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listenfield.repo.common.Polygon.repeatedFields_, null);
};
goog.inherits(proto.listenfield.repo.common.Polygon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.Polygon.displayName = 'proto.listenfield.repo.common.Polygon';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listenfield.repo.common.Polygon.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.Polygon.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.Polygon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.Polygon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.Polygon.toObject = function(includeInstance, msg) {
  var f, obj = {
    exteriorring: (f = msg.getExteriorring()) && proto.listenfield.repo.common.LinearRing.toObject(includeInstance, f),
    interiorringsList: jspb.Message.toObjectList(msg.getInteriorringsList(),
    proto.listenfield.repo.common.LinearRing.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.Polygon}
 */
proto.listenfield.repo.common.Polygon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.Polygon;
  return proto.listenfield.repo.common.Polygon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.Polygon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.Polygon}
 */
proto.listenfield.repo.common.Polygon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.listenfield.repo.common.LinearRing;
      reader.readMessage(value,proto.listenfield.repo.common.LinearRing.deserializeBinaryFromReader);
      msg.setExteriorring(value);
      break;
    case 2:
      var value = new proto.listenfield.repo.common.LinearRing;
      reader.readMessage(value,proto.listenfield.repo.common.LinearRing.deserializeBinaryFromReader);
      msg.addInteriorrings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.Polygon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.Polygon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.Polygon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.Polygon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExteriorring();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.listenfield.repo.common.LinearRing.serializeBinaryToWriter
    );
  }
  f = message.getInteriorringsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.listenfield.repo.common.LinearRing.serializeBinaryToWriter
    );
  }
};


/**
 * optional LinearRing exteriorRing = 1;
 * @return {?proto.listenfield.repo.common.LinearRing}
 */
proto.listenfield.repo.common.Polygon.prototype.getExteriorring = function() {
  return /** @type{?proto.listenfield.repo.common.LinearRing} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.LinearRing, 1));
};


/** @param {?proto.listenfield.repo.common.LinearRing|undefined} value */
proto.listenfield.repo.common.Polygon.prototype.setExteriorring = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.listenfield.repo.common.Polygon.prototype.clearExteriorring = function() {
  this.setExteriorring(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.Polygon.prototype.hasExteriorring = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated LinearRing interiorRings = 2;
 * @return {!Array.<!proto.listenfield.repo.common.LinearRing>}
 */
proto.listenfield.repo.common.Polygon.prototype.getInteriorringsList = function() {
  return /** @type{!Array.<!proto.listenfield.repo.common.LinearRing>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listenfield.repo.common.LinearRing, 2));
};


/** @param {!Array.<!proto.listenfield.repo.common.LinearRing>} value */
proto.listenfield.repo.common.Polygon.prototype.setInteriorringsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.listenfield.repo.common.LinearRing=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listenfield.repo.common.LinearRing}
 */
proto.listenfield.repo.common.Polygon.prototype.addInteriorrings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.listenfield.repo.common.LinearRing, opt_index);
};


proto.listenfield.repo.common.Polygon.prototype.clearInteriorringsList = function() {
  this.setInteriorringsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.MultiPolygon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.listenfield.repo.common.MultiPolygon.repeatedFields_, null);
};
goog.inherits(proto.listenfield.repo.common.MultiPolygon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.MultiPolygon.displayName = 'proto.listenfield.repo.common.MultiPolygon';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.listenfield.repo.common.MultiPolygon.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.MultiPolygon.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.MultiPolygon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.MultiPolygon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.MultiPolygon.toObject = function(includeInstance, msg) {
  var f, obj = {
    polygonsList: jspb.Message.toObjectList(msg.getPolygonsList(),
    proto.listenfield.repo.common.Polygon.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.MultiPolygon}
 */
proto.listenfield.repo.common.MultiPolygon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.MultiPolygon;
  return proto.listenfield.repo.common.MultiPolygon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.MultiPolygon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.MultiPolygon}
 */
proto.listenfield.repo.common.MultiPolygon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.listenfield.repo.common.Polygon;
      reader.readMessage(value,proto.listenfield.repo.common.Polygon.deserializeBinaryFromReader);
      msg.addPolygons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.MultiPolygon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.MultiPolygon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.MultiPolygon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.MultiPolygon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPolygonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.listenfield.repo.common.Polygon.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Polygon polygons = 1;
 * @return {!Array.<!proto.listenfield.repo.common.Polygon>}
 */
proto.listenfield.repo.common.MultiPolygon.prototype.getPolygonsList = function() {
  return /** @type{!Array.<!proto.listenfield.repo.common.Polygon>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.listenfield.repo.common.Polygon, 1));
};


/** @param {!Array.<!proto.listenfield.repo.common.Polygon>} value */
proto.listenfield.repo.common.MultiPolygon.prototype.setPolygonsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.listenfield.repo.common.Polygon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.listenfield.repo.common.Polygon}
 */
proto.listenfield.repo.common.MultiPolygon.prototype.addPolygons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.listenfield.repo.common.Polygon, opt_index);
};


proto.listenfield.repo.common.MultiPolygon.prototype.clearPolygonsList = function() {
  this.setPolygonsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.repo.common.Location = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.repo.common.Location, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.repo.common.Location.displayName = 'proto.listenfield.repo.common.Location';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.repo.common.Location.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.repo.common.Location.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.repo.common.Location} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.Location.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.listenfield.repo.common.Point.toObject(includeInstance, f),
    gpssource: (f = msg.getGpssource()) && proto.listenfield.repo.common.GpsSource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.repo.common.Location}
 */
proto.listenfield.repo.common.Location.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.repo.common.Location;
  return proto.listenfield.repo.common.Location.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.repo.common.Location} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.repo.common.Location}
 */
proto.listenfield.repo.common.Location.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.listenfield.repo.common.Point;
      reader.readMessage(value,proto.listenfield.repo.common.Point.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = new proto.listenfield.repo.common.GpsSource;
      reader.readMessage(value,proto.listenfield.repo.common.GpsSource.deserializeBinaryFromReader);
      msg.setGpssource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.repo.common.Location.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.repo.common.Location.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.repo.common.Location} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.repo.common.Location.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.listenfield.repo.common.Point.serializeBinaryToWriter
    );
  }
  f = message.getGpssource();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.listenfield.repo.common.GpsSource.serializeBinaryToWriter
    );
  }
};


/**
 * optional Point position = 1;
 * @return {?proto.listenfield.repo.common.Point}
 */
proto.listenfield.repo.common.Location.prototype.getPosition = function() {
  return /** @type{?proto.listenfield.repo.common.Point} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.Point, 1));
};


/** @param {?proto.listenfield.repo.common.Point|undefined} value */
proto.listenfield.repo.common.Location.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.listenfield.repo.common.Location.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.Location.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GpsSource gpsSource = 2;
 * @return {?proto.listenfield.repo.common.GpsSource}
 */
proto.listenfield.repo.common.Location.prototype.getGpssource = function() {
  return /** @type{?proto.listenfield.repo.common.GpsSource} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.repo.common.GpsSource, 2));
};


/** @param {?proto.listenfield.repo.common.GpsSource|undefined} value */
proto.listenfield.repo.common.Location.prototype.setGpssource = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.listenfield.repo.common.Location.prototype.clearGpssource = function() {
  this.setGpssource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.repo.common.Location.prototype.hasGpssource = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.listenfield.repo.common);
