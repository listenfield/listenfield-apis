/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var api_pb = require('./api_pb.js');
goog.exportSymbol('proto.listenfield.auth.ContinueLoginRequest', null, global);
goog.exportSymbol('proto.listenfield.auth.LoginChallenge', null, global);
goog.exportSymbol('proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum', null, global);
goog.exportSymbol('proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.Value', null, global);
goog.exportSymbol('proto.listenfield.auth.LoginResult', null, global);
goog.exportSymbol('proto.listenfield.auth.LoginWithPasswordRequest', null, global);
goog.exportSymbol('proto.listenfield.auth.RefreshRequest', null, global);
goog.exportSymbol('proto.listenfield.auth.SessionInfo', null, global);
goog.exportSymbol('proto.listenfield.auth.SessionTypeRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.auth.SessionTypeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.auth.SessionTypeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.auth.SessionTypeRequest.displayName = 'proto.listenfield.auth.SessionTypeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.auth.SessionTypeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.auth.SessionTypeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.auth.SessionTypeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.SessionTypeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    refresh: jspb.Message.getFieldWithDefault(msg, 1, false),
    username: jspb.Message.getFieldWithDefault(msg, 2, false),
    idtoken: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.auth.SessionTypeRequest}
 */
proto.listenfield.auth.SessionTypeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.auth.SessionTypeRequest;
  return proto.listenfield.auth.SessionTypeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.auth.SessionTypeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.auth.SessionTypeRequest}
 */
proto.listenfield.auth.SessionTypeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRefresh(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIdtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.auth.SessionTypeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.auth.SessionTypeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.auth.SessionTypeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.SessionTypeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRefresh();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIdtoken();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool refresh = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.listenfield.auth.SessionTypeRequest.prototype.getRefresh = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.listenfield.auth.SessionTypeRequest.prototype.setRefresh = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool username = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.listenfield.auth.SessionTypeRequest.prototype.getUsername = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.listenfield.auth.SessionTypeRequest.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool idToken = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.listenfield.auth.SessionTypeRequest.prototype.getIdtoken = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.listenfield.auth.SessionTypeRequest.prototype.setIdtoken = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.auth.LoginWithPasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.auth.LoginWithPasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.auth.LoginWithPasswordRequest.displayName = 'proto.listenfield.auth.LoginWithPasswordRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.auth.LoginWithPasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.auth.LoginWithPasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.auth.LoginWithPasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.LoginWithPasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mfacode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sessiontyperequest: (f = msg.getSessiontyperequest()) && proto.listenfield.auth.SessionTypeRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.auth.LoginWithPasswordRequest}
 */
proto.listenfield.auth.LoginWithPasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.auth.LoginWithPasswordRequest;
  return proto.listenfield.auth.LoginWithPasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.auth.LoginWithPasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.auth.LoginWithPasswordRequest}
 */
proto.listenfield.auth.LoginWithPasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMfacode(value);
      break;
    case 4:
      var value = new proto.listenfield.auth.SessionTypeRequest;
      reader.readMessage(value,proto.listenfield.auth.SessionTypeRequest.deserializeBinaryFromReader);
      msg.setSessiontyperequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.auth.LoginWithPasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.auth.LoginWithPasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.auth.LoginWithPasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.LoginWithPasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMfacode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSessiontyperequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.listenfield.auth.SessionTypeRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.listenfield.auth.LoginWithPasswordRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.auth.LoginWithPasswordRequest.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.listenfield.auth.LoginWithPasswordRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.listenfield.auth.LoginWithPasswordRequest.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string mfaCode = 3;
 * @return {string}
 */
proto.listenfield.auth.LoginWithPasswordRequest.prototype.getMfacode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.listenfield.auth.LoginWithPasswordRequest.prototype.setMfacode = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional SessionTypeRequest sessionTypeRequest = 4;
 * @return {?proto.listenfield.auth.SessionTypeRequest}
 */
proto.listenfield.auth.LoginWithPasswordRequest.prototype.getSessiontyperequest = function() {
  return /** @type{?proto.listenfield.auth.SessionTypeRequest} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.auth.SessionTypeRequest, 4));
};


/** @param {?proto.listenfield.auth.SessionTypeRequest|undefined} value */
proto.listenfield.auth.LoginWithPasswordRequest.prototype.setSessiontyperequest = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.listenfield.auth.LoginWithPasswordRequest.prototype.clearSessiontyperequest = function() {
  this.setSessiontyperequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.auth.LoginWithPasswordRequest.prototype.hasSessiontyperequest = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.auth.ContinueLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.auth.ContinueLoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.auth.ContinueLoginRequest.displayName = 'proto.listenfield.auth.ContinueLoginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.auth.ContinueLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.auth.ContinueLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.auth.ContinueLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.ContinueLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    continuationtoken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mfacode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    challengedataMap: (f = msg.getChallengedataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.auth.ContinueLoginRequest}
 */
proto.listenfield.auth.ContinueLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.auth.ContinueLoginRequest;
  return proto.listenfield.auth.ContinueLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.auth.ContinueLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.auth.ContinueLoginRequest}
 */
proto.listenfield.auth.ContinueLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContinuationtoken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMfacode(value);
      break;
    case 4:
      var value = msg.getChallengedataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.auth.ContinueLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.auth.ContinueLoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.auth.ContinueLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.ContinueLoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContinuationtoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMfacode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChallengedataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.listenfield.auth.ContinueLoginRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.auth.ContinueLoginRequest.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string continuationToken = 2;
 * @return {string}
 */
proto.listenfield.auth.ContinueLoginRequest.prototype.getContinuationtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.listenfield.auth.ContinueLoginRequest.prototype.setContinuationtoken = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string mfaCode = 3;
 * @return {string}
 */
proto.listenfield.auth.ContinueLoginRequest.prototype.getMfacode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.listenfield.auth.ContinueLoginRequest.prototype.setMfacode = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * map<string, string> challengeData = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.listenfield.auth.ContinueLoginRequest.prototype.getChallengedataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.listenfield.auth.ContinueLoginRequest.prototype.clearChallengedataMap = function() {
  this.getChallengedataMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.auth.LoginChallenge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.auth.LoginChallenge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.auth.LoginChallenge.displayName = 'proto.listenfield.auth.LoginChallenge';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.auth.LoginChallenge.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.auth.LoginChallenge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.auth.LoginChallenge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.LoginChallenge.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : [],
    continuationtoken: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.auth.LoginChallenge}
 */
proto.listenfield.auth.LoginChallenge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.auth.LoginChallenge;
  return proto.listenfield.auth.LoginChallenge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.auth.LoginChallenge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.auth.LoginChallenge}
 */
proto.listenfield.auth.LoginChallenge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.Value} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContinuationtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.auth.LoginChallenge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.auth.LoginChallenge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.auth.LoginChallenge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.LoginChallenge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getContinuationtoken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.displayName = 'proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum}
 */
proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum;
  return proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum}
 */
proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.Value = {
  MFA: 0,
  PASSWORD_VERIFIER: 1,
  NEW_PASSWORD: 2
};

/**
 * optional ChallengeTypeEnum.Value type = 1;
 * @return {!proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.Value}
 */
proto.listenfield.auth.LoginChallenge.prototype.getType = function() {
  return /** @type {!proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.Value} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.listenfield.auth.LoginChallenge.ChallengeTypeEnum.Value} value */
proto.listenfield.auth.LoginChallenge.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * map<string, string> data = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.listenfield.auth.LoginChallenge.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.listenfield.auth.LoginChallenge.prototype.clearDataMap = function() {
  this.getDataMap().clear();
};


/**
 * optional string continuationToken = 5;
 * @return {string}
 */
proto.listenfield.auth.LoginChallenge.prototype.getContinuationtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.listenfield.auth.LoginChallenge.prototype.setContinuationtoken = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.auth.SessionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.auth.SessionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.auth.SessionInfo.displayName = 'proto.listenfield.auth.SessionInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.auth.SessionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.auth.SessionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.auth.SessionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.SessionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokentype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    expiresat: (f = msg.getExpiresat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    username: jspb.Message.getFieldWithDefault(msg, 4, ""),
    refreshtoken: jspb.Message.getFieldWithDefault(msg, 5, ""),
    idtoken: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.auth.SessionInfo}
 */
proto.listenfield.auth.SessionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.auth.SessionInfo;
  return proto.listenfield.auth.SessionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.auth.SessionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.auth.SessionInfo}
 */
proto.listenfield.auth.SessionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokentype(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpiresat(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshtoken(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.auth.SessionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.auth.SessionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.auth.SessionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.SessionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokentype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExpiresat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRefreshtoken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIdtoken();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.listenfield.auth.SessionInfo.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.auth.SessionInfo.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string tokenType = 2;
 * @return {string}
 */
proto.listenfield.auth.SessionInfo.prototype.getTokentype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.listenfield.auth.SessionInfo.prototype.setTokentype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp expiresAt = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.listenfield.auth.SessionInfo.prototype.getExpiresat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.listenfield.auth.SessionInfo.prototype.setExpiresat = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.listenfield.auth.SessionInfo.prototype.clearExpiresat = function() {
  this.setExpiresat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.auth.SessionInfo.prototype.hasExpiresat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string username = 4;
 * @return {string}
 */
proto.listenfield.auth.SessionInfo.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.listenfield.auth.SessionInfo.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string refreshToken = 5;
 * @return {string}
 */
proto.listenfield.auth.SessionInfo.prototype.getRefreshtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.listenfield.auth.SessionInfo.prototype.setRefreshtoken = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string idToken = 6;
 * @return {string}
 */
proto.listenfield.auth.SessionInfo.prototype.getIdtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.listenfield.auth.SessionInfo.prototype.setIdtoken = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.auth.LoginResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.listenfield.auth.LoginResult.oneofGroups_);
};
goog.inherits(proto.listenfield.auth.LoginResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.auth.LoginResult.displayName = 'proto.listenfield.auth.LoginResult';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.listenfield.auth.LoginResult.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.listenfield.auth.LoginResult.LoginResOneofCase = {
  LOGIN_RES_ONEOF_NOT_SET: 0,
  SESSION: 1,
  CHALLENGE: 2
};

/**
 * @return {proto.listenfield.auth.LoginResult.LoginResOneofCase}
 */
proto.listenfield.auth.LoginResult.prototype.getLoginResOneofCase = function() {
  return /** @type {proto.listenfield.auth.LoginResult.LoginResOneofCase} */(jspb.Message.computeOneofCase(this, proto.listenfield.auth.LoginResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.auth.LoginResult.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.auth.LoginResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.auth.LoginResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.LoginResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && proto.listenfield.auth.SessionInfo.toObject(includeInstance, f),
    challenge: (f = msg.getChallenge()) && proto.listenfield.auth.LoginChallenge.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.auth.LoginResult}
 */
proto.listenfield.auth.LoginResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.auth.LoginResult;
  return proto.listenfield.auth.LoginResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.auth.LoginResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.auth.LoginResult}
 */
proto.listenfield.auth.LoginResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.listenfield.auth.SessionInfo;
      reader.readMessage(value,proto.listenfield.auth.SessionInfo.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 2:
      var value = new proto.listenfield.auth.LoginChallenge;
      reader.readMessage(value,proto.listenfield.auth.LoginChallenge.deserializeBinaryFromReader);
      msg.setChallenge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.auth.LoginResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.auth.LoginResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.auth.LoginResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.LoginResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.listenfield.auth.SessionInfo.serializeBinaryToWriter
    );
  }
  f = message.getChallenge();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.listenfield.auth.LoginChallenge.serializeBinaryToWriter
    );
  }
};


/**
 * optional SessionInfo session = 1;
 * @return {?proto.listenfield.auth.SessionInfo}
 */
proto.listenfield.auth.LoginResult.prototype.getSession = function() {
  return /** @type{?proto.listenfield.auth.SessionInfo} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.auth.SessionInfo, 1));
};


/** @param {?proto.listenfield.auth.SessionInfo|undefined} value */
proto.listenfield.auth.LoginResult.prototype.setSession = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.listenfield.auth.LoginResult.oneofGroups_[0], value);
};


proto.listenfield.auth.LoginResult.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.auth.LoginResult.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LoginChallenge challenge = 2;
 * @return {?proto.listenfield.auth.LoginChallenge}
 */
proto.listenfield.auth.LoginResult.prototype.getChallenge = function() {
  return /** @type{?proto.listenfield.auth.LoginChallenge} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.auth.LoginChallenge, 2));
};


/** @param {?proto.listenfield.auth.LoginChallenge|undefined} value */
proto.listenfield.auth.LoginResult.prototype.setChallenge = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.listenfield.auth.LoginResult.oneofGroups_[0], value);
};


proto.listenfield.auth.LoginResult.prototype.clearChallenge = function() {
  this.setChallenge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.auth.LoginResult.prototype.hasChallenge = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.listenfield.auth.RefreshRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.listenfield.auth.RefreshRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.listenfield.auth.RefreshRequest.displayName = 'proto.listenfield.auth.RefreshRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.listenfield.auth.RefreshRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.listenfield.auth.RefreshRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.listenfield.auth.RefreshRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.RefreshRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    refreshtoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessiontyperequest: (f = msg.getSessiontyperequest()) && proto.listenfield.auth.SessionTypeRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.listenfield.auth.RefreshRequest}
 */
proto.listenfield.auth.RefreshRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.listenfield.auth.RefreshRequest;
  return proto.listenfield.auth.RefreshRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.listenfield.auth.RefreshRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.listenfield.auth.RefreshRequest}
 */
proto.listenfield.auth.RefreshRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshtoken(value);
      break;
    case 2:
      var value = new proto.listenfield.auth.SessionTypeRequest;
      reader.readMessage(value,proto.listenfield.auth.SessionTypeRequest.deserializeBinaryFromReader);
      msg.setSessiontyperequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.listenfield.auth.RefreshRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.listenfield.auth.RefreshRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.listenfield.auth.RefreshRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.listenfield.auth.RefreshRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRefreshtoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessiontyperequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.listenfield.auth.SessionTypeRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string refreshToken = 1;
 * @return {string}
 */
proto.listenfield.auth.RefreshRequest.prototype.getRefreshtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.listenfield.auth.RefreshRequest.prototype.setRefreshtoken = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional SessionTypeRequest sessionTypeRequest = 2;
 * @return {?proto.listenfield.auth.SessionTypeRequest}
 */
proto.listenfield.auth.RefreshRequest.prototype.getSessiontyperequest = function() {
  return /** @type{?proto.listenfield.auth.SessionTypeRequest} */ (
    jspb.Message.getWrapperField(this, proto.listenfield.auth.SessionTypeRequest, 2));
};


/** @param {?proto.listenfield.auth.SessionTypeRequest|undefined} value */
proto.listenfield.auth.RefreshRequest.prototype.setSessiontyperequest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.listenfield.auth.RefreshRequest.prototype.clearSessiontyperequest = function() {
  this.setSessiontyperequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.listenfield.auth.RefreshRequest.prototype.hasSessiontyperequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.listenfield.auth);
